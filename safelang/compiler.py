"""Simple SafeLang code generators."""

from __future__ import annotations

import re
from typing import List

from .parser import FunctionDef

# C and Rust type maps

_C_TYPE_MAP = {
    "f32": "float",
    "f64": "double",
    "int8": "int8_t",
    "uint8": "uint8_t",
    "int16": "int16_t",
    "uint16": "uint16_t",
    "int32": "int32_t",
    "uint32": "uint32_t",
    "int64": "int64_t",
    "uint64": "uint64_t",
}

_RUST_TYPE_MAP = {
    "f32": "f32",
    "f64": "f64",
    "int8": "i8",
    "uint8": "u8",
    "int16": "i16",
    "uint16": "u16",
    "int32": "i32",
    "uint32": "u32",
    "int64": "i64",
    "uint64": "u64",
}

_PARAM_RE = re.compile(r"(\w+)\(([^)]+)\)")


def _parse_params(lines: List[str], type_map: dict, style: str) -> List[str]:
    """Parse parameters from consume block lines.

    ``type_map`` controls the type names and ``style`` selects
    formatting ("c" or "rust").
    """
    params = []
    for ln in lines:
        m = _PARAM_RE.search(ln)
        if not m:
            continue
        typ, name = m.group(1), m.group(2)
        mapped = type_map.get(typ, "int")
        if style == "c":
            params.append(f"{mapped} {name}")
        else:  # rust
            params.append(f"{name}: {mapped}")
    return params


def generate_c(funcs: List[FunctionDef]) -> str:
    """Generate a very small C translation of ``funcs``."""
    lines = ["// Generated by SafeLang", "#include <stdint.h>", ""]
    for fn in funcs:
        params = _parse_params(fn.consume, _C_TYPE_MAP, "c")
        lines.append(f"/* {fn.name}: @space {fn.space} @time {fn.time} */")
        lines.append(f"void {fn.name}({', '.join(params)}) {{")
        body = fn.body.strip().splitlines()
        for b in body:
            lines.append("    " + b.rstrip())
        lines.append("}")
        lines.append("")
    return "\n".join(lines)


def generate_rust(funcs: List[FunctionDef]) -> str:
    """Generate a very small Rust translation of ``funcs``."""
    lines = ["// Generated by SafeLang", ""]
    for fn in funcs:
        params = _parse_params(fn.consume, _RUST_TYPE_MAP, "rust")
        lines.append(f"// {fn.name}: @space {fn.space} @time {fn.time}")
        lines.append(f"pub fn {fn.name}({', '.join(params)}) {{")
        body = fn.body.strip().splitlines()
        for b in body:
            lines.append("    " + b.rstrip())
        lines.append("}")
        lines.append("")
    return "\n".join(lines)


__all__ = ["generate_c", "generate_rust"]
